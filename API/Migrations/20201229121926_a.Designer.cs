// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(GeoContext))]
    [Migration("20201229121926_a")]
    partial class a
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("CountryRiver", b =>
                {
                    b.Property<int>("BelongsToID")
                        .HasColumnType("int");

                    b.Property<int>("RiversID")
                        .HasColumnType("int");

                    b.HasKey("BelongsToID", "RiversID");

                    b.HasIndex("RiversID");

                    b.ToTable("CountryRiver");
                });

            modelBuilder.Entity("DomainLayer.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CountryID")
                        .HasColumnType("int");

                    b.Property<int>("Country_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("Country_ID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DomainLayer.Models.Continent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("DomainLayer.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Continent_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<double>("Suface")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("Continent_ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DomainLayer.Models.Log", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DomainLayer.Models.River", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Rivers");
                });

            modelBuilder.Entity("CountryRiver", b =>
                {
                    b.HasOne("DomainLayer.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("BelongsToID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.River", null)
                        .WithMany()
                        .HasForeignKey("RiversID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLayer.Models.City", b =>
                {
                    b.HasOne("DomainLayer.Models.Country", null)
                        .WithMany("Capital")
                        .HasForeignKey("CountryID");

                    b.HasOne("DomainLayer.Models.Country", "BelongsTo")
                        .WithMany("Cities")
                        .HasForeignKey("Country_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BelongsTo");
                });

            modelBuilder.Entity("DomainLayer.Models.Country", b =>
                {
                    b.HasOne("DomainLayer.Models.Continent", "BelongsTo")
                        .WithMany("Countries")
                        .HasForeignKey("Continent_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BelongsTo");
                });

            modelBuilder.Entity("DomainLayer.Models.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("DomainLayer.Models.Country", b =>
                {
                    b.Navigation("Capital");

                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
